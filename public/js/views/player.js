// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'views/base/view', 'text!templates/player.hbs'], function(Chaplin, BaseView, template) {
  'use strict';

  var PlayerView;
  return PlayerView = (function(_super) {

    __extends(PlayerView, _super);

    function PlayerView() {
      this.flashCallback = __bind(this.flashCallback, this);

      this.playClip = __bind(this.playClip, this);

      this.loadClip = __bind(this.loadClip, this);

      this.render = __bind(this.render, this);
      return PlayerView.__super__.constructor.apply(this, arguments);
    }

    PlayerView.prototype.template = template;

    template = null;

    PlayerView.prototype.tagName = 'div';

    PlayerView.prototype.id = 'player';

    PlayerView.prototype.autoRender = true;

    PlayerView.prototype.container = 'body .content';

    PlayerView.prototype.initialize = function() {
      PlayerView.__super__.initialize.apply(this, arguments);
      Chaplin.mediator.subscribe('playClip', this.playClip);
      return Chaplin.mediator.subscribe('loadClip', this.loadClip);
    };

    PlayerView.prototype.render = function() {
      PlayerView.__super__.render.apply(this, arguments);
      return this.$el.addClass("player horizontal");
    };

    PlayerView.prototype.loadClip = function(clip) {
      return this.playClip(clip.collection.models[0]);
    };

    PlayerView.prototype.playClip = function(result) {
      var attributes, expressInstall, flashVars, params;
      expressInstall = '';
      flashVars = {
        autoPlay: true
      };
      params = {
        allowfullscreen: true,
        bgcolor: '#000000',
        wmode: 'transparent',
        allowscriptaccess: 'always'
      };
      attributes = {};
      return swfobject.embedSWF(result.playerUrl, 'flashObject', 640, 480, 10, expressInstall, flashVars, params, attributes, this.flashCallback);
    };

    PlayerView.prototype.flashCallback = function(options) {};

    return PlayerView;

  })(BaseView);
});
