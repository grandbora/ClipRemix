// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'views/base/view', 'text!templates/clip.hbs'], function(Chaplin, BaseView, template) {
  'use strict';

  var ClipView;
  return ClipView = (function(_super) {

    __extends(ClipView, _super);

    function ClipView() {
      this.loadClip = __bind(this.loadClip, this);

      this.render = __bind(this.render, this);
      return ClipView.__super__.constructor.apply(this, arguments);
    }

    ClipView.prototype.template = template;

    template = null;

    ClipView.prototype.tagName = 'div';

    ClipView.prototype.autoRender = true;

    ClipView.prototype.container = '.clipList';

    ClipView.prototype.initialize = function() {
      ClipView.__super__.initialize.apply(this, arguments);
      return this.delegate('click', '', this.loadClip);
    };

    ClipView.prototype.render = function() {
      return ClipView.__super__.render.apply(this, arguments);
    };

    ClipView.prototype.loadClip = function() {
      return Chaplin.mediator.publish('loadClip', this.model);
    };

    return ClipView;

  })(BaseView);
});
