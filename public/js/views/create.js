// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'views/base/view', 'views/result', 'text!templates/create.hbs'], function(Chaplin, BaseView, ResultView, template) {
  'use strict';

  var CreateView;
  return CreateView = (function(_super) {

    __extends(CreateView, _super);

    function CreateView() {
      return CreateView.__super__.constructor.apply(this, arguments);
    }

    CreateView.prototype.template = template;

    template = null;

    CreateView.prototype.tagName = 'div';

    CreateView.prototype.id = 'create';

    CreateView.prototype.autoRender = true;

    CreateView.prototype.container = 'body .content';

    CreateView.prototype.initialize = function() {
      CreateView.__super__.initialize.apply(this, arguments);
      this.delegate('keyup', '.search input', this.collection.fetch);
      this.modelBind('reset', this.renderResults);
      return this.modelBind('remove', this.removeResult);
    };

    CreateView.prototype.render = function() {
      CreateView.__super__.render.apply(this, arguments);
      return this.renderResults;
    };

    CreateView.prototype.renderResults = function() {
      var resultContainer;
      resultContainer = this.$el.find('.results');
      resultContainer.empty();
      return _.each(this.collection.models, function(result) {
        return new ResultView({
          model: result,
          id: result.cid
        });
      });
    };

    CreateView.prototype.removeResult = function(result, resultList, index) {
      var resultEl;
      resultEl = this.$el.find('.results #' + result.cid);
      return resultEl.remove();
    };

    return CreateView;

  })(BaseView);
});
