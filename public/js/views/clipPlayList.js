// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'views/base/view', 'views/resultPlayList'], function(Chaplin, BaseView, ResultView) {
  'use strict';

  var ClipPlayListView;
  return ClipPlayListView = (function(_super) {
    var template;

    __extends(ClipPlayListView, _super);

    function ClipPlayListView() {
      this.loadClip = __bind(this.loadClip, this);

      this.render = __bind(this.render, this);
      return ClipPlayListView.__super__.constructor.apply(this, arguments);
    }

    ClipPlayListView.prototype.template = "";

    template = null;

    ClipPlayListView.prototype.tagName = 'div';

    ClipPlayListView.prototype.autoRender = true;

    ClipPlayListView.prototype.container = '.content';

    ClipPlayListView.prototype.initialize = function() {
      ClipPlayListView.__super__.initialize.apply(this, arguments);
      return Chaplin.mediator.subscribe('loadClip', this.loadClip);
    };

    ClipPlayListView.prototype.render = function() {
      return ClipPlayListView.__super__.render.apply(this, arguments);
    };

    ClipPlayListView.prototype.loadClip = function(clip) {
      $('.clipPlayList').empty();
      return _.each(clip.collection.models, function(result) {
        return new ResultView({
          model: result,
          id: "playList_" + result.cid,
          className: "playListClip"
        });
      });
    };

    return ClipPlayListView;

  })(BaseView);
});
